# -*- coding: utf-8 -*-
"""Back-Shirt-Class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WlIIFOBj9t-kW7eOCxbaAcPEjmgKweKF
"""

# Header Files

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np
import cv2
from collections import Counter
from skimage.color import rgb2lab, deltaE_cie76

class Bshirt:

  #RGB TO HEX Function
  def RGB2HEX(color):
    return "#{:02x}{:02x}{:02x}".format(int(color[0]), int(color[1]), int(color[2]))

  #Extract the Most Prominent Colour
  def get_colors(image, number_of_colors, show_chart):
    temp = 0
    modified_image = cv2.resize(image, (600, 400), interpolation = cv2.INTER_AREA)
    modified_image = modified_image.reshape(modified_image.shape[0]*modified_image.shape[1], 3)
    
    clf = KMeans(n_clusters = number_of_colors)
    labels = clf.fit_predict(modified_image)
    
    counts = Counter(labels)
    
    center_colors = clf.cluster_centers_
    ordered_colors = [center_colors[i]/255 for i in counts.keys()]
    hex_colors = [Bshirt.RGB2HEX(ordered_colors[i]*255) for i in counts.keys()]
    rgb_colors = [ordered_colors[i]*255 for i in counts.keys()]
    
    if (show_chart):
        plt.figure(figsize = (8, 6))
        #temp = max(counts.values)
        plt.pie(counts.values(), labels = hex_colors, colors = ordered_colors)
        #counts.get(max(counts, key=counts.get))
    plt.savefig("Result.png")
    return rgb_colors

  def generate(ref_image, x, y, z):
    from PIL import Image

    img = Image.open("/content/White-Back3.jpg")
    img = img.convert("RGB")

    datas = img.getdata()

    new_image_data = []
    for item in datas:
    # change all white (also shades of whites) pixels to yellow
      if item[0] in list(range(255, 256)):
        #new_image_data.append((120, 0, 0))
        new_image_data.append(item)
      else:
        new_image_data.append((x, y, z))
        #new_image_data.append(item)
        
      # update image data
      img.putdata(new_image_data)

      # save new image
      img.save("Back-shirt-Image.png")

      # show image in preview
      img.show()

  def __init__(self, link, refernce):
    self.link = link
    self.refernce = refernce

    if refernce == 'Input': 
      input_image = cv2.imread(link)
      #return input_image

    else:
      ref_image = cv2.imread(link)
      #return ref_image

      
if __name__ == '__main__':

    imgfile = '/content/Check3.jpg'
    ref_file = '/content/White-Back3.jpg'
    
    input_image = Bshirt(imgfile, 'Input')
    ref_image = Bshirt(ref_file, 'Refernce')
    new_shirt = Bshirt.get_colors(input_image, 6, True)

    x, y, z = new_shirt[5]
    x = int(x)
    y = int(y)
    z = int(z)

    Bshirt.generate(ref_image, x, y, z)